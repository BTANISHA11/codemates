import { EventEmitter } from '../utils';
import { BlockObject } from '../types/block-type';
export type UserCredentials = {
    userId: string;
    userToken: string;
};
export type UserData = Record<string, string>;
export type Message = {
    id: string;
    conversationId: string;
    authorId: string | undefined;
    sentOn: Date;
    disableInput?: boolean;
    payload: BlockObject;
};
export type Events = {
    conversation: string | undefined;
    message: Message;
    messageSent: string;
    error: Error;
    webchatVisibility: 'show' | 'hide' | 'toggle';
    webchatConfig: Record<string, any>;
    customEvent: Record<string, any>;
};
export type WebchatClient = {
    mode: 'messaging' | 'pushpin';
    clientId: string | undefined;
    userId: string | undefined;
    conversationId: string | undefined;
    on: EventEmitter<Events>['on'];
    connect(creds?: UserCredentials, data?: UserData): Promise<UserCredentials | undefined>;
    disconnect(): Promise<void>;
    sendMessage(message: string): Promise<void>;
    sendEvent(event: Record<string, any>): Promise<void>;
    switchConversation(id: string): Promise<void>;
    conversationExists(id: string): Promise<boolean>;
    newConversation(): Promise<void>;
    listMessages(): Promise<Message[]>;
};
